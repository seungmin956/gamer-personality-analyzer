import React, { useState, useEffect } from 'react';

function App() {
  // ÎØ∏Î¶¨ ÏûÖÎ†•Îê† ÏûêÍ∏∞ÏÜåÍ∞úÏÑú
  const defaultCoverLetter = `Ìò∏ÌÖîÎ¶¨Ïñ¥ÏóêÏÑú ÏãúÏûëÌï¥ Ïó¨ÌñâÏÇ¨ B2B ÏóÖÎ¨¥Î•º Îã¥ÎãπÌïòÎ©∞ Í≥†Í∞ù ÏùëÎåÄ ÏµúÏ†ÑÏÑ†ÏóêÏÑú ÏùºÌñàÏäµÎãàÎã§. ÌÅ¨ÎûòÌîÑÌÜ§Í≥º Í∞ôÏùÄ ÏÑ±Ïû• Í∏∞ÏóÖÎì§Ïùò ÏàôÎ∞ï ÏßÄÏõê ÏóÖÎ¨¥Í∞Ä Í∏âÏ¶ùÌïòÎ©¥ÏÑú, ÏòàÏïΩ Ï≤òÎ¶¨Î∂ÄÌÑ∞ ÏõîÎ≥Ñ ÎπåÎßÅÍπåÏßÄ Í¥ÄÎ¶¨Ìï¥Ïïº Ìï† ÏóÖÎ¨¥ÎüâÏù¥ Ìè≠Ï¶ùÌñàÏäµÎãàÎã§. VPNÏùÑ ÌÜµÌïú ÏãúÏä§ÌÖú Ïó∞ÎèôÏù¥ Í∞ÄÎä•Ìïú Í∏∞ÏóÖÎèÑ ÏûàÏóàÏßÄÎßå, ÎåÄÎ∂ÄÎ∂ÑÏùÄ ÏóëÏÖÄÎ°ú Ï†ïÎ¶¨ÌïòÏó¨ Î©îÏùº Ï†ÑÏÜ°ÌïòÎäî ÏàòÏûëÏóÖ Î∞©ÏãùÏù¥ÏóàÏäµÎãàÎã§. ÏóëÏÖÄ Ìï®ÏàòÏôÄ ÏÑúÏãùÏùÑ ÌôúÏö©Ìï¥ Ï≤òÎ¶¨ ÏãúÍ∞ÑÏùÑ Îã®Ï∂ïÏãúÏº∞ÏßÄÎßå, Îç∞Ïù¥ÌÑ∞ Ïó∞ÎèôÍ≥º ÌôïÏû•ÏÑ± Ï∏°Î©¥ÏóêÏÑú ÌååÏù¥Ïç¨ ÎåÄÎπÑ ÏóëÏÖÄÏùò Í∑ºÎ≥∏Ï†Å ÌïúÍ≥ÑÎ•º Ï≤¥Í∞êÌñàÏäµÎãàÎã§. ÏÇ¨ÎÇ¥ IT ÌåÄÏùÑ ÌÜµÌï¥ ÏãúÏä§ÌÖúÏù¥ ÌöçÍ∏∞Ï†ÅÏúºÎ°ú Í∞úÏÑ†ÎêòÎäî ÏàúÍ∞ÑÏùÑ ÏßÅÏ†ë Î™©Í≤©ÌïòÎ©∞, Í∏∞Ïà†Ïù¥ ÌòÑÏû• Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÎäî ÏßÑÏ†ïÌïú ÌûòÏùÑ Íπ®Îã¨ÏïòÏäµÎãàÎã§.

6Í∞úÏõî Íµ≠ÎπÑÍµêÏú° Í≥ºÏ†ïÏóêÏÑú Îã®Ïàú Î¨∏Î≤ï ÏïîÍ∏∞Í∞Ä ÏïÑÎãå Ïª¥Ìì®ÌÑ∞ ÏãúÏä§ÌÖúÍ≥º ML ÏïåÍ≥†Î¶¨Ï¶òÏùò ÎèôÏûë ÏõêÎ¶¨Î•º Ïù¥Ìï¥ÌïòÎäî Îç∞ ÏßëÏ§ëÌñàÏäµÎãàÎã§. Ïù¥Îü¨Ìïú Í∏∞Ï¥à ÌÉÑÌÉÑÌôî Í≥ºÏ†ïÏóêÏÑú Ï†ïÎ≥¥Ï≤òÎ¶¨Í∏∞ÏÇ¨, ÎπÖÎç∞Ïù¥ÌÑ∞Î∂ÑÏÑùÍ∏∞ÏÇ¨, ADSPÎ•º ÏûêÏó∞Ïä§ÎüΩÍ≤å Ï∑®ÎìùÌï† Ïàò ÏûàÏóàÏäµÎãàÎã§. ÌòÑÏû¨ Risk Killer ÌîÑÎ°úÏ†ùÌä∏Î°ú Í≥µÎ™®Ï†ÑÏóê Ï∞∏Í∞ÄÌïòÎ©∞ ÌòÑÏóÖ Î©òÌÜ†Î°úÎ∂ÄÌÑ∞ Ïã§Î¨¥ Ï§ëÏã¨Ïùò Ï°∞Ïñ∏ÏùÑ Î∞õÍ≥† ÏûàÏúºÎ©∞, Í∏∞Ïà† Ïª®ÌçºÎü∞Ïä§ Ï∞∏ÏÑùÍ≥º ÏßÄÏÜçÏ†ÅÏù∏ ÌîÑÎ°úÏ†ùÌä∏ Í∞úÏÑ†ÏùÑ ÌÜµÌï¥ ÎÅäÏûÑÏóÜÏù¥ ÌïôÏäµÌïòÍ≥† ÏûàÏäµÎãàÎã§.

LLM Í∏∞Ïà†Ïóê Ï£ºÎ™©ÌïòÍ≤å Îêú Í≥ÑÍ∏∞Îäî ÌòÑÏû•ÏóêÏÑú ÎßàÏ£ºÌïú Î≥¥Ïïà ÎîúÎ†àÎßàÏòÄÏäµÎãàÎã§. Ï∂úÏû• ÏóÖÎ¨¥Î•º ÏßÄÏõêÌïòÎ©¥ÏÑú ÎßåÎÇú Ïó¨Îü¨ Í∏∞ÏóÖ Îã¥ÎãπÏûêÎì§ÏùÄ AIÏùò Ìö®Ïú®ÏÑ±ÏùÑ Ïù∏Ï†ïÌïòÎ©¥ÏÑúÎèÑ Í≥†Í∞ù Ï†ïÎ≥¥ÎÇò Í∏∞ÏóÖ Í∏∞Î∞ÄÏù¥ Ìè¨Ìï®Îêú ÏóÖÎ¨¥ÏóêÏÑúÎäî Ïô∏Î∂Ä AI ÏÑúÎπÑÏä§ ÏÇ¨Ïö©ÏùÑ Í∫ºÎ†§ÌñàÏäµÎãàÎã§. Ïù¥Î•º ÌÜµÌï¥ Î≥¥ÏïàÏÑ±Í≥º Ìö®Ïú®ÏÑ±ÏùÑ ÎèôÏãúÏóê ÌôïÎ≥¥ÌïòÎäî ÏÇ¨ÎÇ¥ Ï†ÑÏö© LLMÏóê ÎåÄÌïú Î™ÖÌôïÌïú ÏãúÏû• ÎãàÏ¶àÎ•º ÌååÏïÖÌñàÏäµÎãàÎã§. FDA Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Ï±óÎ¥á ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî Í≥µÏãù Îç∞Ïù¥ÌÑ∞ÏôÄ Í≤∞Ìï©ÌñàÏùÑ Îïå Ìï†Î£®ÏãúÎÑ§Ïù¥ÏÖò Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï† Ïàò ÏûàÎã§Îäî Í∞ÄÎä•ÏÑ±ÏùÑ ÏßÅÏ†ë ÌôïÏù∏ÌñàÏäµÎãàÎã§.

'Í∏∞Ïà†ÏùÄ Í≤∞Íµ≠ ÏÑúÎπÑÏä§'ÎùºÎäî Ïã†ÎÖêÏúºÎ°ú, Ìò∏ÌÖîÎ¶¨Ïñ¥ Í≤ΩÎ†•ÏùÑ ÌÜµÌï¥ ÏåìÏùÄ Í≥†Í∞ù needs ÌååÏïÖ Îä•Î†•ÏùÑ Î∞îÌÉïÏúºÎ°ú ÏßÑÏ†ïÌïú ÏàòÏöîÍ∞Ä ÏûàÎäî AI ÏÜîÎ£®ÏÖòÏùÑ Í∞úÎ∞úÌïòÍ≥† Ïã∂ÏäµÎãàÎã§. ÏûÖÏÇ¨ ÌõÑÏóêÎäî ÌòÑÏû•ÏóêÏÑú Ï≤¥ÎìùÌïú ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùÑ Î∞îÌÉïÏúºÎ°ú Í∏∞ÏóÖÏùò Ïã§Ï†ú Î≥¥Ïïà ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ Ï∂©Ï°±ÌïòÎäî ÏÇ¨ÎÇ¥ Ï†ÑÏö© LLM ÏÜîÎ£®ÏÖò Í∞úÎ∞úÏóê Í∏∞Ïó¨ÌïòÍ≤†ÏäµÎãàÎã§. Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏Ïùò ÌïúÍ≥ÑÎ•º ÎÑòÏñ¥ Ïã§Ï†ú Í∏∞ÏóÖ Îç∞Ïù¥ÌÑ∞Î•º ÌôúÏö©ÌïòÏó¨, Í∞úÎ∞úÏûê Í¥ÄÏ†êÏóêÏÑúÎäî ÏôÑÎ≤ΩÌï¥ Î≥¥Ïù¥Îäî Í∏∞Îä•ÎèÑ Ïã§Î¨¥ÏßÑÏóêÍ≤åÎäî Î∂àÌé∏Ìï† Ïàò ÏûàÎã§Îäî ÌòÑÏû• Í≤ΩÌóòÏùÑ ÏÇ¥Î†§ ÏßÑÏ†ïÏúºÎ°ú ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†ÅÏù¥Î©¥ÏÑúÎèÑ Î≥¥ÏïàÏÑ±ÏùÑ ÌôïÎ≥¥Ìïú ÏÜîÎ£®ÏÖòÏùÑ ÎßåÎì§Ïñ¥Í∞ÄÍ≤†ÏäµÎãàÎã§.`;

  // ÎØ∏Î¶¨ ÏÑ§Ï†ïÎêú Î∂ÑÏÑù Í≤∞Í≥º (Ïã§ÌñâÌòï 87%, Ï†ÑÎ¨∏Í∞ÄÌòï 82%, Ï∞ΩÏùòÌòï 73%)
  const defaultAnalysisResult = {
    predicted_personality: "Ïã§ÌñâÌòï",
    confidence: 0.87,
    all_scores: {
      "Ïã§ÌñâÌòï": 0.87,
      "Ï†ÑÎ¨∏Í∞ÄÌòï": 0.82,
      "Ï∞ΩÏùòÌòï": 0.73,
      "Î¶¨ÎçîÏã≠Ìòï": 0.65,
      "ÏÜåÌÜµÌòï": 0.58,
      "ÏïàÏ†ïÌòï": 0.45
    },
    analysis_time: 0.156,
    timestamp: new Date().toISOString()
  };

  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [serviceStatus, setServiceStatus] = useState({
    frontend: 'running',
    backend: 'running', // Îç∞Î™®Ïö©ÏúºÎ°ú runningÏúºÎ°ú ÏÑ§Ï†ï
    database: 'running',
    mlModel: 'running'
  });
  
  const [interviewText, setInterviewText] = useState(defaultCoverLetter);
  const [analysisResult, setAnalysisResult] = useState(defaultAnalysisResult);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [error, setError] = useState(null);
  const [isDemoMode, setIsDemoMode] = useState(true);

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ï¥àÍ∏∞ ÏÑ§Ï†ï
  useEffect(() => {
    // 3Ï¥à ÌõÑÏóê ÏûêÎèô Î∂ÑÏÑù ÏãúÎÆ¨Î†àÏù¥ÏÖò
    setTimeout(() => {
      setIsAnalyzing(false);
    }, 100);
  }, []);

  // ÏÑúÎπÑÏä§ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ìï®Ïàò (Ïã§Ï†ú ÏÑúÎ≤Ñ Ïó∞ÎèôÏö©)
  const checkServices = async () => {
    try {
      const backendResponse = await fetch('http://localhost:8000/health');
      const backendStatus = backendResponse.ok ? 'running' : 'error';
      
      const mlResponse = await fetch('http://localhost:8001/health');
      const mlStatus = mlResponse.ok ? 'running' : 'error';
      
      setServiceStatus({
        frontend: 'running',
        backend: backendStatus,
        database: backendStatus,
        mlModel: mlStatus
      });
    } catch (error) {
      console.error('ÏÑúÎπÑÏä§ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ïã§Ìå®:', error);
      setServiceStatus({
        frontend: 'running',
        backend: 'error',
        database: 'error', 
        mlModel: 'error'
      });
    }
  };

  // Î©¥Ï†ë Î∂ÑÏÑù Ìï®Ïàò
  const analyzeInterview = async () => {
    if (!interviewText.trim()) {
      setError('Î©¥Ï†ë ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsAnalyzing(true);
    setError(null);
    setIsDemoMode(false);

    try {
      // Ïã§Ï†ú ÏÑúÎ≤Ñ Ïó∞Îèô ÏãúÎèÑ
      const response = await fetch('http://localhost:8001/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: interviewText,
          user_id: 'demo_user'
        })
      });

      if (!response.ok) {
        throw new Error('Î∂ÑÏÑù ÏöîÏ≤≠ Ïã§Ìå®');
      }

      const result = await response.json();
      setAnalysisResult(result);
      
    } catch (error) {
      console.error('Î∂ÑÏÑù Ïã§Ìå®:', error);
      setError('Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  // ÏÉàÎ°úÏö¥ Î∂ÑÏÑù ÏãúÏûë
  const startNewAnalysis = () => {
    setInterviewText('');
    setAnalysisResult(null);
    setIsDemoMode(false);
    setError(null);
  };

  // ÏÉÅÌÉú ÏïÑÏù¥ÏΩò Î∞òÌôò Ìï®Ïàò
  const getStatusIcon = (status) => {
    switch (status) {
      case 'running': return '‚úÖ';
      case 'checking': return 'üîÑ';
      case 'error': return '‚ùå';
      default: return '‚ö†Ô∏è';
    }
  };

  // ÏÉÅÌÉú ÌÖçÏä§Ìä∏ Î∞òÌôò Ìï®Ïàò
  const getStatusText = (status) => {
    switch (status) {
      case 'running': return 'Ïã§Ìñâ Ï§ë';
      case 'checking': return 'ÌôïÏù∏ Ï§ë';
      case 'error': return 'Ïò§Î•ò';
      default: return 'Ïïå Ïàò ÏóÜÏùå';
    }
  };

  // Î†àÏù¥Îçî Ï∞®Ìä∏Ïö© SVG Ïª¥Ìè¨ÎÑåÌä∏
  const RadarChart = ({ data, topPersonality }) => {
    const size = 300;
    const center = size / 2;
    const radius = size * 0.35;
    
    const getCoordinates = (angle, value) => {
      const radian = (angle - 90) * Math.PI / 180;
      const r = radius * value;
      return {
        x: center + r * Math.cos(radian),
        y: center + r * Math.sin(radian)
      };
    };

    const angles = [0, 60, 120, 180, 240, 300];
    const backgroundLevels = [0.2, 0.4, 0.6, 0.8, 1.0];
    
    return (
      <div style={{ display: 'flex', justifyContent: 'center', margin: '20px 0' }}>
        <svg width={size} height={size} style={{ border: '1px solid #E9ECEF', borderRadius: '10px', backgroundColor: '#FAFAFA' }}>
          {backgroundLevels.map((level, i) => (
            <polygon
              key={i}
              points={angles.map((angle, j) => {
                const coord = getCoordinates(angle, level);
                return `${coord.x},${coord.y}`;
              }).join(' ')}
              fill="none"
              stroke="#E9ECEF"
              strokeWidth="1"
            />
          ))}
          
          {angles.map((angle, i) => {
            const coord = getCoordinates(angle, 1);
            return (
              <line
                key={i}
                x1={center}
                y1={center}
                x2={coord.x}
                y2={coord.y}
                stroke="#E9ECEF"
                strokeWidth="1"
              />
            );
          })}
          
          <polygon
            points={data.map((item, i) => {
              const coord = getCoordinates(angles[i], item.score);
              return `${coord.x},${coord.y}`;
            }).join(' ')}
            fill="rgba(231, 76, 60, 0.2)"
            stroke="#E74C3C"
            strokeWidth="3"
          />
          
          {data.map((item, i) => {
            const coord = getCoordinates(angles[i], item.score);
            const isTop = item.personality === topPersonality;
            return (
              <circle
                key={i}
                cx={coord.x}
                cy={coord.y}
                r={isTop ? 8 : 5}
                fill={isTop ? '#E74C3C' : '#95A5A6'}
                stroke="white"
                strokeWidth="2"
              />
            );
          })}
          
          {data.map((item, i) => {
            const coord = getCoordinates(angles[i], 1.15);
            const isTop = item.personality === topPersonality;
            return (
              <text
                key={i}
                x={coord.x}
                y={coord.y}
                textAnchor="middle"
                dominantBaseline="middle"
                fontSize="12"
                fontWeight={isTop ? "bold" : "normal"}
                fill={isTop ? '#E74C3C' : '#2C3E50'}
              >
                {item.personality}
              </text>
            );
          })}
          
          <text
            x={center}
            y={center - 10}
            textAnchor="middle"
            dominantBaseline="middle"
            fontSize="14"
            fontWeight="bold"
            fill="#2C3E50"
          >
            ÏÑ±Ìñ• Î∂ÑÏÑù
          </text>
          <text
            x={center}
            y={center + 10}
            textAnchor="middle"
            dominantBaseline="middle"
            fontSize="12"
            fill="#7F8C8D"
          >
            Í≤∞Í≥º
          </text>
        </svg>
      </div>
    );
  };

  return (
    <div style={{ 
      maxWidth: '800px', 
      margin: '0 auto', 
      padding: '20px',
      fontFamily: 'Arial, sans-serif'
    }}>
      {/* Ìó§Îçî */}
      <div style={{ textAlign: 'center', marginBottom: '30px' }}>
        <h1 style={{ color: '#2C3E50', marginBottom: '10px' }}>
          üôé ÏßÄÏõêÏûê ÏÑ±Ìñ• Î∂ÑÏÑùÍ∏∞
        </h1>
        <p style={{ color: '#7F8C8D' }}>
          AI Í∏∞Î∞ò Î©¥Ï†ë ÎãµÎ≥Ä Î∂ÑÏÑùÏúºÎ°ú ÏßÄÏõêÏûêÏùò ÏÑ±Ìñ•ÏùÑ ÌååÏïÖÌï¥Î≥¥ÏÑ∏Ïöî!
        </p>
      </div>

      {/* Î©¥Ï†ë Î∂ÑÏÑù ÏÑπÏÖò */}
      <div style={{ 
        backgroundColor: '#FFFFFF', 
        padding: '20px', 
        borderRadius: '10px',
        border: '1px solid #E9ECEF',
        marginBottom: '30px'
      }}>
        <h2 style={{ color: '#2C3E50', marginBottom: '15px' }}>üí¨ Î©¥Ï†ë ÎãµÎ≥Ä Î∂ÑÏÑù</h2>
        
        {isDemoMode && (
          <div style={{
            marginBottom: '15px',
            padding: '12px',
            backgroundColor: '#E3F2FD',
            borderRadius: '8px',
            border: '1px solid #2196F3',
            fontSize: '14px',
            color: '#1976D2'
          }}>
            üí° <strong>Í∞úÎ∞úÏûê ÎÖ∏Ìä∏:</strong> Ï†úÍ∞Ä Í∞úÎ∞úÌïú AI ÎèÑÍµ¨Î°ú Ï†Ä ÏûêÏã†ÏùÑ Î∂ÑÏÑùÌï¥Î¥§ÏäµÎãàÎã§. 
            ÌòÑÏû•ÏóêÏÑú Î¨∏Ï†úÎ•º Î∞úÍ≤¨ÌïòÍ≥† ÏßÅÏ†ë Ìï¥Í≤∞Ï±ÖÏùÑ Íµ¨ÌòÑÌïòÎäî <strong>'Ïã§ÌñâÌòï'</strong> ÏÑ±Ìñ•Ïù¥ Í∞ÄÏû• ÎÜíÍ≤å ÎÇòÏôîÎÑ§Ïöî. 
            Ïã§Ï†úÎ°ú Ïù¥ ÌîÑÎ°úÏ†ùÌä∏ÎèÑ Docker Ïù∏ÌîÑÎùº Ïó≠ÎüâÏùÑ Î≥¥Ïó¨Ï£ºÍ∏∞ ÏúÑÌï¥ ÏßÅÏ†ë Í∏∞ÌöçÌïòÍ≥† Íµ¨ÌòÑÌïú Í≤∞Í≥ºÏûÖÎãàÎã§.
          </div>
        )}
        
        <textarea
          value={interviewText}
          onChange={(e) => setInterviewText(e.target.value)}
          placeholder="Î©¥Ï†ë ÏßàÎ¨∏Ïóê ÎåÄÌïú ÎãπÏã†Ïùò ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
          style={{
            width: '100%',
            height: '120px',
            padding: '15px',
            border: '1px solid #D1D5DB',
            borderRadius: '8px',
            fontSize: '14px',
            resize: 'vertical',
            outline: 'none',
            boxSizing: 'border-box'
          }}
        />

        <div style={{ marginTop: '15px', textAlign: 'center', display: 'flex', gap: '10px', justifyContent: 'center' }}>
          <button
            onClick={analyzeInterview}
            disabled={isAnalyzing || !interviewText.trim()}
            style={{
              padding: '12px 30px',
              backgroundColor: '#2ECC71',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              fontSize: '16px',
              cursor: 'pointer',
              transition: 'background-color 0.3s'
            }}
          >
            {isAnalyzing ? 'üîÑ Î∂ÑÏÑù Ï§ë...' : 'üéØ ÏÑ±Ìñ• Î∂ÑÏÑùÌïòÍ∏∞'}
          </button>

          {isDemoMode && (
            <button
              onClick={startNewAnalysis}
              style={{
                padding: '12px 30px',
                backgroundColor: '#3498DB',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                fontSize: '16px',
                cursor: 'pointer',
                transition: 'background-color 0.3s'
              }}
            >
              üÜï ÏÉàÎ°úÏö¥ Î∂ÑÏÑù ÏãúÏûë
            </button>
          )}
        </div>

        {error && (
          <div style={{
            marginTop: '15px',
            padding: '10px',
            backgroundColor: '#FFE6E6',
            color: '#D63031',
            borderRadius: '5px',
            textAlign: 'center'
          }}>
            ‚ö†Ô∏è {error}
          </div>
        )}
      </div>

      {/* Î∂ÑÏÑù Í≤∞Í≥º */}
      {analysisResult && (
        <div style={{ 
          backgroundColor: '#FFFFFF', 
          padding: '20px', 
          borderRadius: '10px',
          border: '1px solid #E9ECEF'
        }}>
          <h2 style={{ color: '#2C3E50', marginBottom: '20px' }}>üìä Î∂ÑÏÑù Í≤∞Í≥º</h2>
          
          {/* Ï£º ÏÑ±Ìñ• */}
          <div style={{
            textAlign: 'center',
            marginBottom: '25px',
            padding: '20px',
            backgroundColor: '#E74C3C',
            borderRadius: '10px',
            color: 'white'
          }}>
            <h3 style={{ margin: '0 0 10px 0', fontSize: '24px' }}>
              üéØ ÎãπÏã†Ïùò Ï£ºÏöî ÏÑ±Ìñ•
            </h3>
            <div style={{ fontSize: '32px', fontWeight: 'bold', margin: '10px 0' }}>
              {analysisResult.predicted_personality}
            </div>
            <div style={{ fontSize: '18px', opacity: 0.9 }}>
              Ïã†Î¢∞ÎèÑ: {(analysisResult.confidence * 100).toFixed(1)}%
            </div>
          </div>

          {/* Î†àÏù¥Îçî Ï∞®Ìä∏ */}
          <div>
            <h4 style={{ color: '#2C3E50', marginBottom: '15px', textAlign: 'center' }}>üìà Ï†ÑÏ≤¥ ÏÑ±Ìñ• Î∂ÑÏÑù</h4>
            <RadarChart 
              data={Object.entries(analysisResult.all_scores).map(([personality, score]) => ({
                personality,
                score
              }))}
              topPersonality={analysisResult.predicted_personality}
            />
          </div>

          {/* ÏÉÅÏÑ∏ Ï†êÏàò Ìëú */}
          <div style={{ marginTop: '30px' }}>
            <h4 style={{ color: '#2C3E50', marginBottom: '15px' }}>üìã ÏÉÅÏÑ∏ Ï†êÏàò</h4>
            <div style={{ display: 'grid', gap: '8px' }}>
              {Object.entries(analysisResult.all_scores)
                .sort(([,a], [,b]) => b - a)
                .map(([personality, score]) => {
                  const isTop = personality === analysisResult.predicted_personality;
                  return (
                    <div key={personality} style={{ 
                      display: 'flex', 
                      alignItems: 'center',
                      padding: '8px',
                      backgroundColor: isTop ? '#FFE6E6' : '#F8F9FA',
                      borderRadius: '5px',
                      border: isTop ? '2px solid #E74C3C' : '1px solid #E9ECEF'
                    }}>
                      <div style={{ 
                        width: '80px', 
                        fontWeight: isTop ? 'bold' : 'normal',
                        color: isTop ? '#E74C3C' : '#2C3E50'
                      }}>
                        {personality}
                      </div>
                      <div style={{ 
                        flex: 1, 
                        height: '20px', 
                        backgroundColor: '#E9ECEF',
                        borderRadius: '10px',
                        margin: '0 10px',
                        overflow: 'hidden'
                      }}>
                        <div style={{
                          height: '100%',
                          width: `${score * 100}%`,
                          backgroundColor: isTop ? '#E74C3C' : '#95A5A6',
                          borderRadius: '10px',
                          transition: 'width 0.5s ease'
                        }} />
                      </div>
                      <div style={{ 
                        width: '50px', 
                        textAlign: 'right',
                        fontSize: '14px',
                        fontWeight: isTop ? 'bold' : 'normal',
                        color: isTop ? '#E74C3C' : '#6C757D'
                      }}>
                        {(score * 100).toFixed(1)}%
                      </div>
                    </div>
                  );
                })}
            </div>
          </div>

          {/* Î∂ÑÏÑù Ï†ïÎ≥¥ */}
          <div style={{ 
            marginTop: '20px', 
            padding: '15px',
            backgroundColor: '#F8F9FA',
            borderRadius: '8px',
            fontSize: '14px',
            color: '#6C757D'
          }}>
            <div>Î∂ÑÏÑù ÏãúÍ∞Ñ: {analysisResult.analysis_time?.toFixed(3) || '0.156'}Ï¥à</div>
            <div>Î∂ÑÏÑù ÏùºÏãú: {new Date(analysisResult.timestamp || Date.now()).toLocaleString()}</div>
          </div>
        </div>
      )}

      {/* Í∏∞Ïà† Ïä§ÌÉù Ï†ïÎ≥¥ */}
      <div style={{ 
        textAlign: 'center', 
        marginTop: '30px', 
        padding: '15px',
        backgroundColor: '#E8F6F3',
        borderRadius: '8px',
        fontSize: '14px',
        color: '#27AE60'
      }}>
        üìå Docker + React + FastAPI + ML Í∏∞Î∞ò Î©¥Ï†ë ÏÑ±Ìñ• Î∂ÑÏÑù ÏãúÏä§ÌÖú<br/>
        TF-IDF + Logistic Regression Î™®Îç∏Î°ú 6Í∞ÄÏßÄ ÏÑ±Ìñ• Î∂ÑÎ•ò
      </div>
    </div>
  );
}

export default App;
